<?php

namespace {{namespace}};

use App\Http\Controllers\Controller;

class {{classname}} extends Controller
{
    protected $service;

    public function __construct(ExampleService $service)
    {
        $this->service = $service;
    }

    public function index(IndexExampleValidation $request)
    {
        $params = $request->validated();

        try {
            ${{pluralVariable}} = $this->service->indexService($params);

            return $this->paginatedApiResponse(
                'success',
                'Successfully Retrieved Example Data',
                200,
                ${{pluralVariable}}
            );
        } catch (\Throwable $th) {
            return $this->specificApiResponse('failed', $th->getMessage(), 400);
        }
    }

    public function show($id)
    {
        try {
            ${{variable}} = $this->service->findService($id);

            return $this->specificApiResponse(
                'success',
                'Successfully Retrieved Specific Example Data',
                200,
                ${{variable}}
            );
        } catch (\Throwable $th) {
            return $this->specificApiResponse('failed', $th->getMessage(), 400);
        }
    }

    public function store(StoreExampleValidation $request)
    {
        $inputData = $request->validated();

        try {
            ${{variable}} = $this->service->storeService($inputData);

            return $this->specificApiResponse(
                'success',
                'Successfully Stored Example Data',
                201,
                ${{variable}}
            );
        } catch (\Throwable $th) {
            return $this->specificApiResponse('failed', $th->getMessage(), 400);
        }
    }

    public function update(UpdateExampleValidation $request, $id)
    {
        $inputData = $request->validated();

        try {
            ${{variable}} = $this->service->updateService($inputData, $id);

            return $this->specificApiResponse(
                'success',
                'Successfully Updated Example Data',
                200,
                ${{variable}}
            );
        } catch (\Throwable $th) {
            return $this->specificApiResponse('failed', $th->getMessage(), 400);
        }
    }

    public function destroy($id)
    {
        try {
            $this->service->deleteService($id);

            return $this->specificApiResponse('success', 'Example Successfully Deleted', 200);
        } catch (\Throwable $th) {
            return $this->specificApiResponse('failed', $th->getMessage(), 400);
        }
    }
}
